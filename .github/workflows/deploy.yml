name: Deploy to Azure VM

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

    - name: Add VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VM
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          set -e
          
          # Ensure Docker is installed and running
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            echo "Docker installed. Please re-run the deployment after logging out and back in."
            exit 1
          fi
          
          # Ensure Docker Compose is installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create application directory if it doesn't exist
          if [ ! -d "/opt/klarifai" ]; then
            echo "Creating application directory..."
            sudo mkdir -p /opt/klarifai
            sudo chown $USER:$USER /opt/klarifai
            mkdir -p /opt/klarifai/logs
          fi
          
          # Navigate to application directory
          cd /opt/klarifai
          
          # Clean and clone repository
          echo "Preparing repository..."
          rm -rf * .[^.]* 2>/dev/null || true
          git clone ${{ secrets.REPO_URL }} temp_repo
          mv temp_repo/* . 2>/dev/null || true
          mv temp_repo/.[^.]* . 2>/dev/null || true
          rm -rf temp_repo
          
          # Create production environment file
          cat > .env.production << EOL
          DEBUG=False
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          REDIS_URL=redis://redis:6379/0
          EOL
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose --env-file .env.production down || true
          
          # Remove old images (optional, saves space)
          docker image prune -f || true
          
          # Build and start new containers
          echo "Building and starting containers..."
          docker-compose --env-file .env.production up -d --build
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Run database migrations
          echo "Running migrations..."
          docker-compose --env-file .env.production exec -T backend python manage.py migrate
          
          # Collect static files
          echo "Collecting static files..."
          docker-compose --env-file .env.production exec -T backend python manage.py collectstatic --noinput
          
          # Create superuser if it doesn't exist
          echo "Creating superuser..."
          docker-compose --env-file .env.production exec -T backend python manage.py shell << PYTHON
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username='${{ secrets.DJANGO_SUPERUSER_USERNAME }}').exists():
              User.objects.create_superuser(
                  username='${{ secrets.DJANGO_SUPERUSER_USERNAME }}',
                  email='${{ secrets.DJANGO_SUPERUSER_EMAIL }}',
                  password='${{ secrets.DJANGO_SUPERUSER_PASSWORD }}'
              )
              print("Superuser created successfully")
          else:
              print("Superuser already exists")
          PYTHON
          
          # Check service health
          echo "Checking service health..."
          docker-compose --env-file .env.production ps
          
          # Test API endpoint
          sleep 10
          curl -f http://localhost/api/datasets/ || echo "API test failed, but continuing..."
          
          echo "Deployment completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          cd /opt/klarifai
          echo "=== Container Status ==="
          docker-compose --env-file .env.production ps
          
          echo "=== Backend Logs (last 20 lines) ==="
          docker-compose --env-file .env.production logs --tail=20 backend
          
          echo "=== Database Status ==="
          docker-compose --env-file .env.production exec -T database pg_isready -U postgres
        EOF

    - name: Cleanup old Docker resources
      run: |
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          # Clean up unused Docker resources
          docker system prune -f
          docker volume prune -f
        EOF