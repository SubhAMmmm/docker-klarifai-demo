version: '3.8'

services:
  # PostgreSQL with pgvector
  database:
    image: pgvector/pgvector:pg15
    container_name: klarifai_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-data_analysis_prod}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - klarifai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: klarifai_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - klarifai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: klarifai_backend
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DB_NAME=${DB_NAME:-data_analysis_prod}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=database
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - klarifai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: klarifai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./staticfiles:/var/www/static:ro
      - ./media:/var/www/media:ro
    depends_on:
      - backend
    networks:
      - klarifai_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  klarifai_network:
    driver: bridge